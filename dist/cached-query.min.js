/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	"use strict";
/******/ 	var __webpack_modules__ = ({

/***/ "./src/cached-query.js":
/*!*****************************!*\
  !*** ./src/cached-query.js ***!
  \*****************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"cquery\": () => (/* binding */ cquery),\n/* harmony export */   \"cquery_cache\": () => (/* binding */ cquery_cache),\n/* harmony export */   \"invalidateCquery\": () => (/* binding */ invalidateCquery),\n/* harmony export */   \"mockCquery\": () => (/* binding */ mockCquery),\n/* harmony export */   \"preparedCquery\": () => (/* binding */ preparedCquery)\n/* harmony export */ });\nconst cquery_cache = {};\n\nfunction preparedCquery(key, url, request_options = {}) {\n    if (key in cquery_cache) {\n        let query = cquery_cache[key];\n\n        if (query.url !== url) {\n            console.warn(`ignore the url: a query already exists with different url ${query.url}, you try to prepare for ${url}`);\n        }\n    }\n\n    cquery_cache[key] = {\n        callbacks: [],\n        data: undefined,\n        error: undefined,\n        key: key,\n        isLoading: false,\n        mock: false,\n        url: url,\n        request_options: request_options\n    };\n}\n\nfunction cquery(key, callback) {\n    const query = cquery_cache[key];\n\n    if (query.data === undefined && query.isLoading === false && query.error === undefined) {\n        _fetchFromQuery(query);\n\n        query.callbacks.push(callback);\n        callback(query.data, query.isLoading, query.error);\n    } else {\n        query.callbacks.push(callback);\n        callback(query.data, query.isLoading, query.error);\n    }\n}\n\nfunction invalidateCquery(key) {\n    const query = cquery_cache[key];\n    if (query.data === undefined && query.isLoading === false) {\n        return;\n    }\n\n    if (query.isLoading === false) {\n        _fetchFromQuery(query);\n    }\n}\n\nfunction mockCquery(key, data, isLoading = false, error = undefined) {\n    const query = cquery_cache[key];\n    query.mock = true;\n    query.data = data;\n    query.isLoading = isLoading;\n    query.error = error;\n}\n\nfunction _fetchFromQuery(query) {\n    if (query.mock === true) {\n        for (const _callback in query.callbacks) {\n            query.callbacks[_callback](query.data, query.isLoading, query.error);\n        }\n        return;\n    }\n\n    query.data = undefined;\n    query.isLoading = true;\n    fetch(query.url, query.request_options)\n        .then(res => res.json())\n        .then(data => {\n            query.isLoading = false;\n            query.data = data;\n            query.error = undefined;\n            for (const _callback in query.callbacks) {\n                query.callbacks[_callback](query.data, query.isLoading, query.error);\n            }\n        })\n        .catch((error) => {\n            query.isLoading = false;\n            query.data = undefined;\n            query.error = error;\n            for (const _callback in query.callbacks) {\n                query.callbacks[_callback](query.data, query.isLoading, query.error);\n            }\n      });\n}\n\n//# sourceURL=webpack://cached-query/./src/cached-query.js?");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The require scope
/******/ 	var __webpack_require__ = {};
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/define property getters */
/******/ 	(() => {
/******/ 		// define getter functions for harmony exports
/******/ 		__webpack_require__.d = (exports, definition) => {
/******/ 			for(var key in definition) {
/******/ 				if(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {
/******/ 					Object.defineProperty(exports, key, { enumerable: true, get: definition[key] });
/******/ 				}
/******/ 			}
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/hasOwnProperty shorthand */
/******/ 	(() => {
/******/ 		__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	(() => {
/******/ 		// define __esModule on exports
/******/ 		__webpack_require__.r = (exports) => {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	})();
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval devtool is used.
/******/ 	var __webpack_exports__ = {};
/******/ 	__webpack_modules__["./src/cached-query.js"](0, __webpack_exports__, __webpack_require__);
/******/ 	var __webpack_export_target__ = window;
/******/ 	for(var i in __webpack_exports__) __webpack_export_target__[i] = __webpack_exports__[i];
/******/ 	if(__webpack_exports__.__esModule) Object.defineProperty(__webpack_export_target__, "__esModule", { value: true });
/******/ 	
/******/ })()
;